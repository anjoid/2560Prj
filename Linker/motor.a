;#include "include.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;// Timer4 overflow interrupt service routine
;interrupt [TIM4_OVF] void timer4_ovf_isr(void)
; 0003 0006 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0007 // Place your code here
; 0003 0008    if(Ysteps-- == 0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 0009         {
; 0003 000A            Ystop();
;PCODE: $00000015 VOL: 0
; 0003 000B         }
; 0003 000C }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;// Timer3 overflow interrupt service routine
;interrupt [TIM3_OVF] void timer3_ovf_isr(void)
; 0003 0010 {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0003 0011 // Place your code here
; 0003 0012    if(Xsteps-- == 0)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0003 0013         {
; 0003 0014            Xstop();
;PCODE: $00000022 VOL: 0
; 0003 0015         }
; 0003 0016 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;/***************************************/
;
;void Xcycle(char speed)
; 0003 001B {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0003 001C     //int steps;
; 0003 001D /* Timer/Counter 3 initialization
; 0003 001E Clock value: 250.000 kHz
; 0003 001F Mode: CTC top=OCR3A
; 0003 0020 OC3A output: Set
; 0003 0021 Compare A Match Interrupt: On  */
; 0003 0022     TCCR3A=0x80;
;	speed -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0003 0023     TCCR3B=0x13;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0003 0024     TCNT3H=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0003 0025     TCNT3L=0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0026     ICR3H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 0027     ICR3L=speed<<2;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 0028     OCR3AH=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0003 0029     OCR3AL=0x02;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0003 002A     OCR3BH=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 002B     OCR3BL=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0003 002C     OCR3CH=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0003 002D     OCR3CL=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0003 002E }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;
;
;void Ymove(int steps,char speed)
; 0003 0032 {
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0003 0033     Ysteps = abs(steps);
;	steps -> Y+1
;	speed -> Y+0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0003 0034     if(steps>0)
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0003 0035         YDIRH;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0003 0036     else
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0003 0037         YDIRL;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0003 0038 // Timer/Counter 4 initialization
; 0003 0039 // Clock source: System Clock
; 0003 003A // Clock value: 250.000 kHz
; 0003 003B // Mode: Ph. & fr. cor. PWM top=ICR4
; 0003 003C // OC4A output: Non-Inv.
; 0003 003D // OC4B output: Discon.
; 0003 003E // OC4C output: Discon.
; 0003 003F // Noise Canceler: Off
; 0003 0040 // Input Capture on Falling Edge
; 0003 0041 // Timer4 Overflow Interrupt: On
; 0003 0042 // Input Capture Interrupt: Off
; 0003 0043 // Compare A Match Interrupt: Off
; 0003 0044 // Compare B Match Interrupt: Off
; 0003 0045 // Compare C Match Interrupt: Off
; 0003 0046     //TCCR4C=0x00;
; 0003 0047     TCNT4H=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0003 0048     TCNT4L=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0003 0049     ICR4H=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0003 004A     ICR4L=speed<<2;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0003 004B     OCR4AH=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0003 004C     OCR4AL=0x04;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0003 004D     OCR4BH=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0003 004E     OCR4BL=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0003 004F     OCR4CH=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0003 0050     OCR4CL=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0003 0051 
; 0003 0052     TCCR4A=0x80;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0003 0053     TCCR4B=0x13;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0003 0054 
; 0003 0055     TIMSK4=0x01;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0003 0056 
; 0003 0057 }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;
;void Xmove(int steps,char speed)
; 0003 005B {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0003 005C     Xsteps = abs(steps);
;	steps -> Y+1
;	speed -> Y+0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0003 005D     if(steps>0)
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0003 005E         XDIRH;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0003 005F     else
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0003 0060         XDIRL;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0003 0061     TCNT3H=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0003 0062     TCNT3L=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0003 0063     ICR3H=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0003 0064     ICR3L=speed<<2;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0003 0065     OCR3AH=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0003 0066     OCR3AL=0x04;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0003 0067     OCR3BH=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0003 0068     OCR3BL=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0003 0069     OCR3CH=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0003 006A     OCR3CL=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0003 006B 
; 0003 006C     TCCR3A=0x80;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0003 006D     TCCR3B=0x13;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0003 006E 
; 0003 006F     TIMSK3=0x01;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0003 0070 }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;void Ystop(void)
; 0003 0073 {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0003 0074     TIMSK4 =0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0003 0075     TCCR4A=0x0;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0003 0076     TCCR4B=0x0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0003 0077 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;void Xstop(void)
; 0003 007A {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0003 007B     TCCR3A=0x0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0003 007C     TCCR3B=0x0;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0003 007D     TIMSK4 =0;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0003 007E }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;
;
;
;
;char motorTest(char cmd)
; 0003 0084 {
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0003 0085     if(cmd & 0x80)
;	cmd -> Y+0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0003 0086             {
; 0003 0087              Xcycle(cmd & 0x0F);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0003 0088             }
; 0003 0089     if(cmd & 0x40)
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0003 008A             {
; 0003 008B              Ymove(200,cmd & 0x0F);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0003 008C             }
; 0003 008D     if(cmd & 0x20)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0003 008E             {
; 0003 008F              Xmove(300,cmd & 0x0F);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0003 0090             }
; 0003 0091     if(cmd & 0x10)
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0003 0092             {
; 0003 0093              Xstop();
;PCODE: $000000D8 VOL: 0
; 0003 0094              Ystop();
;PCODE: $000000D9 VOL: 0
; 0003 0095             }
; 0003 0096     return 1;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0003 0097 }
;PCODE: $000000DE VOL: 0
