;#include "include.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;
;
;
;flash unsigned long LVCO_FREQS[3][2] =
;{
;	{950000,970000},
;	{970000,1065000},
;	{1065000,1170000}
;};
;flash unsigned long HVCO_FREQS[7][2] =
;{
;	{1170000,1300000},
;	{1300000,1445000},
;	{1445000,1607000},
;	{1607000,1778000},
;	{1778000,1942000},
;	{1942000,2131000},
;	{2131000,2150000}
;};
;
;
;
;void TunerRst(void)
; 0001 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 001C 	PORTE.2=0;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 001D 	delay_ms(50);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0001 001E 	PORTE.2=1;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 001F }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;
;
;/***********************************
;I2C开始位  SDA SCL设为输出
;SDA在SCL为高时从高变为低
;***********************************/
;void i2c_sta(void)
; 0001 0028 {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 0029 	DDRE |= 0x30;      //PE5 PE4(SCL SDA) as output
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 002A 	SDAH;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 002B 	SCLH;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 002C 	delay_us(10);
;PCODE: $00000021 VOL: 0
; 0001 002D 	SDAL;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 002E 	delay_us(2);
;PCODE: $00000024 VOL: 0
; 0001 002F }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;
;/******************************
;I2C结束位  SDA SCL设为输出
;SDA在SCL为高时变为高
;*******************************/
;void i2c_stp(void)
; 0001 0036 {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0037 	SCLH;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 0038 	delay_us(2);
;PCODE: $0000002B VOL: 0
; 0001 0039 	SDAL;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 003A         delay_us(2);
;PCODE: $0000002E VOL: 0
; 0001 003B 	SDAH;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 003C }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;
;/*****************************
;读取ACK  在SCL变高后2us读取SDA
;从机将SDA拉低为ACK响应
;有ACK返回1  无ACK返回0
;******************************/
;char SDA_in(void)
; 0001 0045 {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0046 
; 0001 0047 DDRE &=0xEF;       //SDA  input
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0048 PORTE |= 0x10;       //SDA pull-up
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0049 delay_us(6);
;PCODE: $00000039 VOL: 0
; 0001 004A SCLH;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 004B delay_us(2);
;PCODE: $0000003C VOL: 0
; 0001 004C if(PINE.4==0)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 004D   {
; 0001 004E       delay_us(2);
;PCODE: $00000040 VOL: 0
; 0001 004F       SCLL;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 0050       DDRE |=0x10;          //SDA output
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0051       PORTE.4=1;            //SDA high
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0052       putchar1('&');
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0053       return 1;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0054   }
; 0001 0055 else
;PCODE: $0000004C VOL: 0
; 0001 0056     {
; 0001 0057      //temp_para++;
; 0001 0058      //Tx0('X');
; 0001 0059      DDRE |=0x10;             //SDA output
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 005A      putchar1('X');
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 005B      return 0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 005C     }
;PCODE: $00000054 VOL: 0
; 0001 005D }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;
;/**************************************
;发送一个字节的数据，发送完成收到ACK返回1  否则返回0
;***************************************/
;char i2c_send(unsigned char data)
; 0001 0064 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0065 	char i;
; 0001 0066 
; 0001 0067 	for(i=0;i<8;i++)
;PCODE: $00000059 VOL: 0
;	data -> Y+1
;	i -> R17
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0068 	{
; 0001 0069         	SCLL;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 006A         	delay_us(4);
;PCODE: $00000065 VOL: 0
; 0001 006B         	if(data & 0x80)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 006C         		SDAH;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0001 006D         	else
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 006E         		SDAL;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 006F         	data=(data<<1);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0070 
; 0001 0071 
; 0001 0072         	delay_us(2);
;PCODE: $00000073 VOL: 0
; 0001 0073         	SCLH;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 0074         	delay_us(4);
;PCODE: $00000076 VOL: 0
; 0001 0075 	}
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0001 0076 	SCLL;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 0077 
; 0001 0078 	if(SDA_in()==1)
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 0079 		{
; 0001 007A 		delay_us(2);
;PCODE: $00000081 VOL: 0
; 0001 007B 		return 1;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0001 007C 		}
; 0001 007D 	else
;PCODE: $00000087 VOL: 0
; 0001 007E 		{
; 0001 007F 		delay_us(2);
;PCODE: $00000088 VOL: 0
; 0001 0080 		return 0;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0081 		}
;PCODE: $0000008E VOL: 0
; 0001 0082 
; 0001 0083 }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;/****************************************
;读取一个字节的数据并返回该字节
;****************************************/
;unsigned char i2c_byte_read(void)
; 0001 0088 {
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 0089         unsigned char i,data;
; 0001 008A         data=0;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;	i -> R17
;	data -> R16
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 008B         DDRE &=0xEF;       //SDA  input
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0001 008C         PORTE |= 0x10;       //SDA pull-up
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0001 008D         SCLL;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 008E         delay_us(3);
;PCODE: $000000A0 VOL: 0
; 0001 008F         for(i=0;i<8;i++)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 0090         {
; 0001 0091                 SCLH;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0001 0092                 delay_us(2);
;PCODE: $000000AC VOL: 0
; 0001 0093                 data=data<<1;
;PCODE: $000000AD VOL: 0
; 0001 0094                 data=(data |(PINE & 0x10));
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 0095                 delay_us(2);
;PCODE: $000000B2 VOL: 0
; 0001 0096 
; 0001 0097                 SCLL;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 0098                 delay_us(4);
;PCODE: $000000B5 VOL: 0
; 0001 0099         }
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0001 009A         //data=(data |((PINE & 0x10)?1:0));
; 0001 009B         DDRE.4=1;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 009C         SDAL;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 009D         SCLH;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 009E         delay_us(4);
;PCODE: $000000C1 VOL: 0
; 0001 009F         SCLL;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 00A0         delay_us(4);
;PCODE: $000000C4 VOL: 0
; 0001 00A1         return data;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0001 00A2 
; 0001 00A3 }
;PCODE: $000000C8 VOL: 0
;
;
;
;/******************************************************
;主机读取I2C  参数分别为 从机地址，读回的字节存放的数组指针，读回的字节数
;slave address,pointer to be written,number to be read
;从机响应了地址返回1 否则返回0
;*******************************************************/
;char i2c_rd(unsigned char addr,unsigned char *ddata,unsigned char counter)
; 0001 00AD {
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 00AE  unsigned char i;
; 0001 00AF  unsigned char *pdata;
; 0001 00B0  i=counter;
;PCODE: $000000CB VOL: 0
;	addr -> Y+7
;	*ddata -> Y+5
;	counter -> Y+4
;	i -> R17
;	*pdata -> R18,R19
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 00B1  pdata=ddata;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 00B2  i2c_sta();
;PCODE: $000000D0 VOL: 0
; 0001 00B3  if(i2c_send(addr|0x01)==1)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 00B4    {
; 0001 00B5          while(i)
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0001 00B6             {
; 0001 00B7                 *pdata=i2c_byte_read();
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 00B8                 pdata++;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 00B9                 i--;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 00BA             }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 00BB          i2c_stp();
;PCODE: $000000E3 VOL: 0
; 0001 00BC          return 1;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 00BD     }
; 0001 00BE  else
;PCODE: $000000E8 VOL: 0
; 0001 00BF         return 0;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 00C0 
; 0001 00C1 }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;/**********************************************
;发送一组字节到从机
;pointer to the first byte,number to be written
;发送完成返回1  否则返回0
;**********************************************/
;char i2c_tran(char *data,char num)
; 0001 00C8 {
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 00C9     char i;
; 0001 00CA     i2c_sta();
;PCODE: $000000F4 VOL: 0
;	*data -> Y+2
;	num -> Y+1
;	i -> R17
;PCODE: $000000F5 VOL: 0
; 0001 00CB     for(i=0;i<num;i++)
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0001 00CC     {
; 0001 00CD         if(i2c_send(*data))
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 00CE                 data++;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 00CF         else
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0001 00D0                 return 0;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0001 00D1     }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 00D2     i2c_stp();
;PCODE: $00000115 VOL: 0
; 0001 00D3     return 1;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 00D4 }
;PCODE: $0000011B VOL: 0
;
;
;
;/******************************
;open tuner interface
;*******************************/
;void EnableTunerOperation(void)
; 0001 00DC {
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0001 00DD     unsigned char byte[3];
; 0001 00DE      byte[0]=0xD0;
;PCODE: $0000011E VOL: 0
;	byte -> Y+0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 00DF      byte[1]=0x01;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0001 00E0      byte[2]=0xC0;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 00E1      i2c_tran(byte,3);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0001 00E2      ////printf("Enable Tuner Operation\n");
; 0001 00E3 }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;
;/*******************************
;close tuner interface
;*******************************/
;void DisableTunerOperation(void)
; 0001 00E9 {
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 00EA     unsigned char byte[3];
; 0001 00EB     byte[0]=0xD0;
;PCODE: $0000012F VOL: 0
;	byte -> Y+0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0001 00EC     byte[1]=0x01;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 00ED     byte[2]=0x40;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0001 00EE     i2c_tran(byte,3);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 00EF     ////printf("Disable Tuner Operation\n");
; 0001 00F0 }
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;/******************************************************
;计算频率 将之转换为tuner初始化需要的字节数据,并写入芯片
;*******************************************************/
;unsigned char TFC(unsigned long _TunerFrequency) //TunerFrequencyCalculate  KHZ
; 0001 00F6 {
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 00F7 
; 0001 00F8 	unsigned long long_tmp, TunerFrequency  ;
; 0001 00F9 	unsigned int i;
; 0001 00FA 	unsigned char B[5] = {0x00},temp[5] = {0x00};
; 0001 00FB 	unsigned int ddata,pd2,pd3,pd4,pd5 ;
; 0001 00FC         //printf("TunerFreq %ld.\n",_TunerFrequency);
; 0001 00FD 
; 0001 00FE 	B[0] = 0xc0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;	_TunerFrequency -> Y+30
;	long_tmp -> Y+26
;	TunerFrequency -> Y+22
;	i -> R16,R17
;	B -> Y+17
;	temp -> Y+12
;	ddata -> R18,R19
;	pd2 -> R20,R21
;	pd3 -> Y+10
;	pd4 -> Y+8
;	pd5 -> Y+6
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0001 00FF 	if ((_TunerFrequency>=900000)&&(_TunerFrequency<1170000)) 	//
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0001 0100 	{
; 0001 0101 		B[4]=0x0e;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 0102 		for (i=0; i<3; i++)
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 0103 		{
; 0001 0104 	        if (_TunerFrequency < LVCO_FREQS[i][1]) break;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0001 0105 		}
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 0106 		i=i+0x05;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 0107 		i=i<<5;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0001 0108     		B[4]= B[4]+i;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0001 0109 	}
; 0001 010A 	else													//
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0001 010B 	{
; 0001 010C 		B[4]=0x0c;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0001 010D 		for (i=0; i<7; i++)
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0001 010E 		{
; 0001 010F 	        if (_TunerFrequency < HVCO_FREQS[i][1]) break;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0001 0110 		}
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 0111 		i=i+0x01;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 0112 		i=i<<5;
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0001 0113 		B[4]= B[4]+i;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 0114 	}
;PCODE: $0000019C VOL: 0
; 0001 0115 	TunerFrequency = _TunerFrequency/500;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0001 0116 	long_tmp = TunerFrequency/32;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0001 0117 	i = TunerFrequency%32;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0001 0118  	B[1] = (int)((long_tmp>>3)&0x000000ff);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0001 0119 	B[2] = (int)((long_tmp<<5)&0x000000ff);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0001 011A 	B[2] = (int)(B[2] + i);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0001 011B 	i=0;
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0001 011C 	////printf("TFC byte1~5:0x%x,0x%x,0x%x,0x%x,0x%x\n",B[0],B[1],B[2],B[3],B[4]);
; 0001 011D     do
;PCODE: $000001B7 VOL: 0
; 0001 011E       {
; 0001 011F //             temp_para = 0;
; 0001 0120 // 	    //printf("the cation of i2c acknowlede in function TFC\n");
; 0001 0121 	    temp[0] = B[0];
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0001 0122 	    temp[1] = B[1];
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0001 0123 	    temp[2] = B[2];
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0001 0124 	    temp[4] = B[4];
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 0125 
; 0001 0126             temp[3] = 0xe1;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0001 0127             temp[4] = B[4] & 0xf3;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 0128 //             //printf("B1. byte1~5  0x%x,0x%x,0x%x,0x%x,0x%x\n",B[0],B[1],B[2],B[3],B[4]);
; 0001 0129              ////printf("temp1. byte1~5  0x%x,0x%x,0x%x,0x%x,0x%x\n",temp[0],temp[1],temp[2],temp[3],temp[4]);
; 0001 012A 
; 0001 012B             EnableTunerOperation();
;PCODE: $000001C5 VOL: 0
; 0001 012C             i2c_tran(temp,5);                   //write byte1 byte2 byte3 byte4 byte5
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0001 012D             //DisableTunerOperation();
; 0001 012E 
; 0001 012F             temp[1] = temp[3] | 0x04;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0001 0130             // //printf("temp2. byte1,4  0x%x,0x%x\n",temp[0],temp[1]);
; 0001 0131             //EnableTunerOperation();
; 0001 0132             i2c_tran(temp,2);           //write byte1 byte4
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0001 0133             //DisableTunerOperation();
; 0001 0134             delay_ms(10);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0001 0135 
; 0001 0136             B[3] = 0xfd;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0001 0137             ddata =  (30000/1000)/2 - 2;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0001 0138             pd2 = (ddata>>1)&0x04	;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0001 0139             pd3 = (ddata<<1)&0x08	;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0001 013A             pd4 = (ddata<<2)&0x08	;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0001 013B             pd5 = (ddata<<4)&0x10	;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0001 013C             B[3] &= 0xE7	;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0001 013D             B[4] &= 0xF3	;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0001 013E             B[3] |= (pd5|pd4)	;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0001 013F             B[4] |= (pd3|pd2)	;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0001 0140 
; 0001 0141 //             //printf("B2. byte1~5  0x%x,0x%x,0x%x,0x%x,0x%x\n",B[0],B[1],B[2],B[3],B[4]);
; 0001 0142 
; 0001 0143             temp[1] = B[3] | 0x04;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0001 0144             temp[2] = B[4];
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0001 0145             // //printf("temp3. byte1,4,5  0x%x,0x%x,0x%x\n",temp[0],temp[1],temp[2]);
; 0001 0146             //EnableTunerOperation();
; 0001 0147             i2c_tran(temp,3);                   //write byte1 byte4 byte5
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0001 0148             DisableTunerOperation();
;PCODE: $0000020E VOL: 0
; 0001 0149 
; 0001 014A             delay_ms(1);
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0001 014B             i++;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0001 014C             if(pll_lk())
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0001 014D             {
; 0001 014E                 //printf("TunerFrequency Calculate & set Success! \n");
; 0001 014F                 return 1;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0001 0150             }
; 0001 0151         }while(i < 4);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0001 0152         //printf("TunerFrequency Calculate & set Failed!\n");
; 0001 0153         return 0;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0001 0154 }
;PCODE: $00000226 VOL: 0
;
;
;/******************************
;STV0288芯片初始化
;***************************/
;void STV0288Init(void)
; 0001 015B {
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0001 015C  unsigned char byte[10];  //i = 0;
; 0001 015D  unsigned char *pointer;
; 0001 015E 
; 0001 015F         // temp_para = 0;
; 0001 0160         // //printf("the cation of i2c acknowlede in function STV0288Init\n");
; 0001 0161 
; 0001 0162         byte[0]=0xD0;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;	byte -> Y+2
;	*pointer -> R16,R17
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0001 0163         pointer= &byte[0];
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0001 0164 
; 0001 0165         /********************************
; 0001 0166         set clock
; 0001 0167         PLL_DIV=100
; 0001 0168         clock inputfrom CLKI,Fmclk=4M*PLL_DIV/4=100M
; 0001 0169         ********************************/
; 0001 016A         byte[1]= 0x40;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0001 016B         byte[2]= 0x64;             //PLLCTRL
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0001 016C         byte[3]= 0x04;             //SYNTCTRL
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0001 016D         i2c_tran(pointer,4);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0001 016E 
; 0001 016F 
; 0001 0170 
; 0001 0171         byte[1]=0x02;                 //ACR
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0001 0172         byte[2]=0x20;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0001 0173         i2c_tran(pointer,3);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0001 0174 
; 0001 0175 
; 0001 0176 
; 0001 0177 
; 0001 0178         /*********************
; 0001 0179         set register about AGC
; 0001 017A         **********************/
; 0001 017B         byte[1]=0x0F;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0001 017C         byte[2]=0x54;               //AGC1REF
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0001 017D         i2c_tran(pointer,3);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0001 017E         ////printf("AGC1REF*");
; 0001 017F         /*******************************
; 0001 0180         set register about timing loop
; 0001 0181         ********************************/
; 0001 0182 
; 0001 0183         byte[1]=0x11;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0001 0184         byte[2]=0x7a;                 //RTC
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0001 0185         i2c_tran(pointer,3);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0001 0186         ////printf("RTC*");
; 0001 0187         byte[1]=0x22;
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0001 0188         byte[2]=0x00;               //RTFM
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0001 0189         byte[3]=0x00;               //RTFL
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0001 018A         i2c_tran(pointer,4);
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0001 018B         ////printf("RTF*");
; 0001 018C 
; 0001 018D         /**********************************************
; 0001 018E         set register about DAC (该寄存器设置不影响锁定)
; 0001 018F         **********************************************/
; 0001 0190 
; 0001 0191         byte[1]=0x1b;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0001 0192         byte[2]=0x8f;                    //DACR1
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0001 0193         byte[3]=0xf0;               //DACR2
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0001 0194         i2c_tran(pointer,4);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0001 0195         ////printf("DACR*");
; 0001 0196         /*******************************
; 0001 0197         set register about carrier loop
; 0001 0198         ********************************/
; 0001 0199         byte[1]=0x15;
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0001 019A         byte[2]=0xf7;                   //CFD
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0001 019B         byte[3]=0x88;                 //ACLC
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0001 019C         byte[4]=0x58;                 //BCLC
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0001 019D         i2c_tran(pointer,5);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0001 019E 
; 0001 019F 
; 0001 01A0         byte[1]=0x19;
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0001 01A1         byte[2]=0xa6;                   //LDT
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0001 01A2         byte[3]=0x88;                 //LDT2
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0001 01A3         i2c_tran(pointer,4);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0001 01A4 
; 0001 01A5         byte[1]=0x2B;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0001 01A6         byte[2]=0xFF;                   //CFRM
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0001 01A7         byte[3]=0xF7;                 //CFRL
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0001 01A8         i2c_tran(pointer,4);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0001 01A9 
; 0001 01AA 
; 0001 01AB         /*******************************
; 0001 01AC         set register about FEC and SYNC
; 0001 01AD         ********************************/
; 0001 01AE         byte[1]=0x37;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0001 01AF         byte[2]=0x2f;                   //PR
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0001 01B0         byte[3]=0x16;                 //VSEARCH
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0001 01B1         byte[4]=0xbd;                 //RS
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0001 01B2         i2c_tran(pointer,5);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0001 01B3 
; 0001 01B4         // byte[1]=0x3B;
; 0001 01B5         // byte[2]=0x13;                   //ERRCTRL
; 0001 01B6         // byte[3]=0x12;                 //VITPROG
; 0001 01B7         // byte[4]=0x30;                 //ERRCTRL2
; 0001 01B8         // i2c_tran(pointer,5);
; 0001 01B9 
; 0001 01BA         byte[1]=0x3c;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0001 01BB         byte[2]=0x12;                 //VITPROG
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0001 01BC         i2c_tran(pointer,3);
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0001 01BD 
; 0001 01BE         byte[1]=0x02;         //ACR
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0001 01BF         byte[2]=0x20;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0001 01C0         i2c_tran(pointer,3);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0001 01C1 
; 0001 01C2         /********************************
; 0001 01C3         set clock
; 0001 01C4         PLL_DIV=100
; 0001 01C5         clock inputfrom CLKI,Fmclk=4M*PLL_DIV/4=100M
; 0001 01C6         ********************************/
; 0001 01C7         byte[1]= 0x40;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0001 01C8         byte[2]= 0x63;             //PLLCTRL
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0001 01C9         byte[3]= 0x04;             //SYNTCTRL
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0001 01CA         byte[4]= 0x20;             //TSTTNR1
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0001 01CB         i2c_tran(pointer,5);
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0001 01CC 
; 0001 01CD 
; 0001 01CE         byte[1]=0xB2;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0001 01CF         byte[2]=0x10;                   //AGCCFG
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0001 01D0         byte[3]=0x82;                 //DIRCLKCFG
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0001 01D1         byte[4]=0x80;                 //AUXCKCFG
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0001 01D2         byte[5]=0x82;                 //STDBYCFG
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0001 01D3         byte[6]=0x82;                 //CS0CFG
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0001 01D4         byte[7]=0x82;                 //CS1CFG
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0001 01D5         i2c_tran(pointer,8);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0001 01D6         //printf("STV0288 Init Done\n");
; 0001 01D7 }
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;
;
;/**********************************
;设定符号率
;**********************************/
;void SetSymbolRate(float sym_rate)
; 0001 01DE {
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0001 01DF         char byte[8];
; 0001 01E0         char *pointer;
; 0001 01E1         long int ksy_rate;
; 0001 01E2         pointer = &byte[0];
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;	sym_rate -> Y+14
;	byte -> Y+6
;	*pointer -> R16,R17
;	ksy_rate -> Y+2
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0001 01E3        // temp_para = 0;
; 0001 01E4 //         //printf("the cation of i2c acknowlede in function SetSymbolRate\n");
; 0001 01E5 
; 0001 01E6         byte[0]=0xD0;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0001 01E7 
; 0001 01E8         /********************************
; 0001 01E9         set clock
; 0001 01EA         PLL_DIV=100
; 0001 01EB         clock inputfrom CLKI,Fmclk=4M*PLL_DIV/4=100M
; 0001 01EC         ********************************/
; 0001 01ED         byte[1]= 0x40;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0001 01EE         byte[2]= 0x64;             //PLLCTRL
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0001 01EF         byte[3]= 0x04;             //SYNTCTRL
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0001 01F0         i2c_tran(pointer,4);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0001 01F1 
; 0001 01F2 
; 0001 01F3 
; 0001 01F4         byte[1]=0x02;                 //ACR
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0001 01F5         byte[2]=0x20;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0001 01F6         i2c_tran(pointer,3);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0001 01F7 
; 0001 01F8         /*****************************
; 0001 01F9         set symbol rate
; 0001 01FA         //SFRH,SFRM,SFRL = 27.5/100*2e20 =0x46666   27.49996
; 0001 01FB         *****************************/
; 0001 01FC         ksy_rate =(sym_rate*1048576/100000);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0001 01FD         byte[1]=0x28;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0001 01FE 
; 0001 01FF         byte[2]=(ksy_rate >> 12)& 0xFF;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0001 0200         byte[3]=(ksy_rate >> 4)& 0xFF;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0001 0201         byte[4]=(ksy_rate << 4)& 0xFF;
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0001 0202 
; 0001 0203         //printf("symbol %f, 0x%x 0x%x 0x%x\n",sym_rate,byte[2],byte[3],byte[4] );
; 0001 0204         byte[5]=0;     //CFRM  载波频率
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0001 0205         byte[6]=0;     //CFRL
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0001 0206         i2c_tran(pointer,7);
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0001 0207         //printf("SetSymbolRate Done\n");
; 0001 0208 }
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;
;
;
;/***************************************************************
;7395初始化
;master clock设置为100M
;测试使用Asia6  12395MHz frequency  27500K symbol rate
;12395-10750=1645=fvco=32*51+13
;11880-10750=1030
;****************************************************************/
;unsigned char tuner(unsigned long F,float S)
; 0001 0214 {
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0001 0215 
; 0001 0216         char i;
; 0001 0217         TunerRst();
;PCODE: $0000030C VOL: 0
;	F -> Y+5
;	S -> Y+1
;	i -> R17
;PCODE: $0000030D VOL: 0
; 0001 0218         delay_ms(50);
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0001 0219 
; 0001 021A 
; 0001 021B         putchar1('1');
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0001 021C         TFC(F);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0001 021D         putchar1('2');
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0001 021E         STV0288Init();
;PCODE: $0000031A VOL: 0
; 0001 021F         putchar1('3');
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0001 0220         SetSymbolRate(S);
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0001 0221         putchar1('4');
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0001 0222         i = 0;
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0001 0223         while(i<4)
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0001 0224         {
; 0001 0225             i++;
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0001 0226             delay_us(900);
;PCODE: $0000032C VOL: 0
; 0001 0227             if(locked())
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0001 0228             {
; 0001 0229                //printf("locked\n");
; 0001 022A                return 1;
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0001 022B             }
; 0001 022C         }
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0001 022D         //printf("not locked\n");
; 0001 022E         return 0;
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0001 022F 
; 0001 0230 }
;PCODE: $0000033D VOL: 0
;
;/*
;read lock register
;and save to pointer p
;*/
;void getstus(char *p)
; 0001 0237   {
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
; 0001 0238         char data[3];
; 0001 0239         char *pdata;
; 0001 023A         char i,j;
; 0001 023B         i = 1;
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;	*p -> Y+7
;	data -> Y+4
;	*pdata -> R16,R17
;	i -> R19
;	j -> R18
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0001 023C         j = 0;
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0001 023D         putchar1('5');
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0001 023E         do
;PCODE: $00000349 VOL: 0
; 0001 023F           {
; 0001 0240                  pdata = &data[0];
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0001 0241                  data[0]= 0xD0;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0001 0242                  data[1]= 0x24;
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0001 0243                  if (i2c_tran(pdata,2))
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0001 0244                    {
; 0001 0245                      putchar1('b');
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0001 0246                       if(i2c_rd(data[0],pdata,2))
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0001 0247                       {
; 0001 0248                                p[j] = data[0];
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0001 0249                                //////printf("R 24-0x%x    ",data[0]);
; 0001 024A                                j = 1;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0001 024B 
; 0001 024C                                 i=0;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0001 024D 
; 0001 024E                       }
; 0001 024F                    }
;PCODE: $0000036B VOL: 0
; 0001 0250             }
;PCODE: $0000036C VOL: 0
; 0001 0251        while(i) ;
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0001 0252        putchar1('6');
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0001 0253        i=1;
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0001 0254        do
;PCODE: $00000377 VOL: 0
; 0001 0255           {
; 0001 0256                  pdata = &data[0];
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0001 0257                  data[0]= 0xD0;
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0001 0258                  data[1]= 0x1E;
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0001 0259                  if (i2c_tran(pdata,2))
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0001 025A                    {
; 0001 025B                          if(i2c_rd(data[0],pdata,2))
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0001 025C                          {
; 0001 025D                               p[j] = data[0];
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
; 0001 025E                               //////printf("R 1E-0x%x\n",data[0]);
; 0001 025F                               i=0;
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0001 0260                          }
; 0001 0261                    }
;PCODE: $00000394 VOL: 0
; 0001 0262           }
;PCODE: $00000395 VOL: 0
; 0001 0263        while(i) ;
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0001 0264       putchar1('7');
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
; 0001 0265   }
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;
;
;char locked(void)
; 0001 0269 {
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0001 026A     char t[2];
; 0001 026B     getstus(t);
;PCODE: $000003A4 VOL: 0
;	t -> Y+0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0001 026C 
; 0001 026D 
; 0001 026E     if(((t[0] & 0x80) == 0x80) && ((t[1] & 0x80) == 0x80))
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0001 026F     {
; 0001 0270         //LED_ON;
; 0001 0271         return 1;
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0001 0272     }
; 0001 0273     else
;PCODE: $000003B7 VOL: 0
; 0001 0274     {
; 0001 0275        STV0288Init();
;PCODE: $000003B8 VOL: 0
; 0001 0276        //LED_OFF;
; 0001 0277        return 0;
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0001 0278     }
;PCODE: $000003BC VOL: 0
; 0001 0279 
; 0001 027A  }
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;
;
;char Get0288Register(unsigned char addr)
; 0001 027E {
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0001 027F     char data[3];
; 0001 0280     char *pdata;
; 0001 0281     pdata = &data[0];
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;	addr -> Y+5
;	data -> Y+2
;	*pdata -> R16,R17
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0001 0282     data[0]= 0xD0;
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0001 0283     data[1]= addr;
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0001 0284     if (i2c_tran(pdata,2))
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0001 0285       {
; 0001 0286        if(i2c_rd(data[0],pdata,1))
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0001 0287           {
; 0001 0288            return data[0];
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0001 0289           }
; 0001 028A       }
;PCODE: $000003E0 VOL: 0
; 0001 028B }
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;
;unsigned char pll_lk(void)
; 0001 028E   {
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0001 028F       unsigned char byte[1] = {0xc0},i = 0;
; 0001 0290       EnableTunerOperation();
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;	byte -> Y+1
;	i -> R17
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
; 0001 0291       do
;PCODE: $000003F2 VOL: 0
; 0001 0292       {
; 0001 0293           i2c_rd(byte[0],byte,1);
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0001 0294           i++;
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0001 0295           if((byte[0] & 0x40) != 0)
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0001 0296           {
; 0001 0297               DisableTunerOperation();
;PCODE: $000003FF VOL: 0
; 0001 0298               return 1;
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0001 0299           }
; 0001 029A       }while(i < 3);
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
; 0001 029B       DisableTunerOperation();
;PCODE: $0000040C VOL: 0
; 0001 029C       return 0;
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0001 029D }
;PCODE: $00000412 VOL: 0
;
;char tunerTest(char para)
; 0001 02A0 {
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0001 02A1    char byte=para;
; 0001 02A2    EnableTunerOperation();
;PCODE: $00000415 VOL: 0
;	para -> Y+1
;	byte -> R17
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0001 02A3    return byte;
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0001 02A4 }
;PCODE: $0000041E VOL: 0
