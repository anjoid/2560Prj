;#include "include.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0002 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0008 ADMUX=(adc_input & 0x1f) | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 0009 if (adc_input & 0x20) ADCSRB |= 0x08;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0002 000A else ADCSRB &= 0xf7;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0002 000B // Delay needed for the stabilization of the ADC input voltage
; 0002 000C delay_us(10);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0002 000D // Start the AD conversion
; 0002 000E ADCSRA|=0x40;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 000F // Wait for the AD conversion to complete
; 0002 0010 while ((ADCSRA & 0x10)==0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 0011 ADCSRA|=0x10;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 0012 return ADCW;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0002 0013 }
;PCODE: $0000002F VOL: 0
;
;
;#pragma used+
;/**********************
;发送单个字符
;***********************/
;void Tx0(unsigned char c)
; 0002 001B {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0002 001C         UDR0 = c;
;	c -> Y+0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0002 001D         while(!(UCSR0A & 0x40))
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 001E                 ;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0002 001F         UCSR0A |= 0x40;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 0020 
; 0002 0021 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;#pragma used-
;
;#pragma used+
;/**********************
;接收单个字符
;***********************/
;unsigned char Rx0(void)
; 0002 0029 {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 002A         if(UCSR0A & 0x80)
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 002B            return UDR0;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 002C         else
;PCODE: $00000047 VOL: 0
; 0002 002D            return 0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 002E }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;#pragma used-
;
;
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0002 0036 {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 0037 char status,data;
; 0002 0038 while (1)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000051 VOL: 0
; 0002 0039       {
; 0002 003A       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0002 003B       data=UDR1;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 003C       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 003D          return data;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 003E       }
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 003F }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0002 0045 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 0046 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 0047 UDR1=c;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0048 }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;#pragma used-
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
